WHITESPACE   =  _{ " " | "\t" | NEWLINE }
COMMENT   = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE } 

program      =   { SOI ~ decl* ~ EOI }

decl = { var_decl
       | func_decl 
       }

var_decl = { var_type ~ id_name_ex ~ ("," ~ id_name_ex)* ~ ";" }
var_type = { var_const? ~ superchip? ~ var_sign ~ var_simple_type }
var_const = { "const" }
superchip = { "superchip" }
var_sign = { ("signed" | "unsigned")? } 
var_simple_type = { "char" | "short" }
id_name = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
id_name_ex = { pointer? ~ var_const? ~ id_name ~ ("[" ~ int ~ "]")? ~ ("=" ~ var_def)? }
var_def = { int | array_def }
array_def = { "{" ~ (int ~ ",")* ~ int ~ "}" }
pointer = { "*" }

func_decl = { inline? ~ "void" ~ id_name ~ "(" ~ ("void")? ~ ")" ~ block }
inline = { "inline" }

block = { "{" ~ statement* ~ "}" }
statement = {
      block
    | do_while
    | while_do
    | for_loop
    | if_statement
    | switch_statement
    | break_statement
    | continue_statement
    | return_statement
    | expr ~ ";"
    | nothing ~ ";"
    | asm_statement
    | strobe_statement
    }
do_while = { "do" ~ statement ~ "while" ~ "(" ~ expr ~ ")" ~ ";" }
while_do = { "while" ~ "(" ~ expr ~ ")"~ statement }
for_loop = { "for" ~ "(" ~ (expr | nothing) ~ ";" ~ (expr | nothing) ~ ";" ~ (expr | nothing) ~ ")" ~ statement }
if_statement = { "if" ~ "(" ~ expr ~ ")" ~ statement ~ ("else" ~ statement)* }
switch_statement = { "switch" ~ "(" ~ expr ~ ")" ~ "{" ~ cases ~ "}" }
break_statement = { "break" ~ ";" }
continue_statement = { "continue" ~ ";"}
return_statement = { "return" ~ ";"}
asm_statement = { "asm" ~ "(" ~ quoted_string ~ ")" ~ ";"}
strobe_statement = { "strobe" ~ "(" ~ expr ~ ")" ~ ";"}
nothing = { "" }

cases = { ("case" ~ int ~ ":" ~ statement*)* ~ ("default" ~ ":" ~ statement*) }

expr       =   { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
    infix    =  _{ mul | div | add | sub | bls | brs | lte | lt | gte | gt | eq | neq |
                   and | xor | or | land | lor | assign | comma |
                   pass | mass | mulass | divass | blsass | brsass | andass | xorass | orass }
      mul    =   { "*" }  // Multiplication
      div    =   { "/" }  // Division
      add    =   { "+" }  // Addition
      sub    =   { "-" }  // Subtraction
      bls    =   { "<<" } // Bitwise left shift
      brs    =   { ">>" } // Bitwise right shift
      lt     =   { "<" }  // Less than
      lte    =   { "<=" } // Less than or equal
      gt     =   { ">" }  // Greater than
      gte    =   { ">=" } // Greater than or equal
      eq     =   { "==" } // Equal
      neq    =   { "!=" } // Different
      and    =   { "&" }  // And
      xor    =   { "^" }  // Xor
      or     =   { "|" }  // Or
      land   =   { "&&" } // Logical and
      lor    =   { "||" } // Logical or
      assign =   { "=" }  // Assignment
      pass   =   { "+=" } // Add assign
      mass   =   { "-=" } // Sub assign
      mulass =   { "*=" } // Multiply assign
      divass =   { "/=" } // Divide assign
      blsass =   { "<<=" }// Bitwise left shift assign
      brsass =   { ">>=" }// Bitwise right shift assign
      andass =   { "&=" } // And assign
      xorass =   { "^=" } // Or assign
      orass  =   { "|=" } // Or assign
      comma  =   { "," }  // Comma (discard left)
    prefix   =  _{ neg | ppp | mmp | addr | deref }
      ppp    =   { "++" } // Increment
      mmp    =   { "--" } // Decrement
      neg    =   { "-" }  // Negation
      addr   =   { "&" }  // Adress of
      deref  =   { "*" }  // Dereference
    postfix  =  _{ pp | mm | call }
      pp     =   { "++" } // Increment
      mm     =   { "--" } // Decrement
      call   =   { "()" } // Function call
    primary  =  _{ int | identifier | "(" ~ expr ~ ")" }

identifier  = { id_name ~ subscript? }
subscript   = { "[" ~ expr ~ "]" }
      
int = { hexadecimal | octal | decimal | quoted_character }
decimal     = @{ ("-")* ~ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
hexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
octal       = @{ "0" ~ ASCII_OCT_DIGIT+ }
character   = @{ (ASCII_ALPHANUMERIC | "\n" | "\t" | "\r") }
quoted_character   = ${ "'" ~ character ~ "'" }
string      = @{ character* } 
quoted_string      = ${ "\"" ~ string ~ "\""}
